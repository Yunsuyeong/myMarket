// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity="prisma"
}

model User {
  id Int @id @default(autoincrement())
  name String
  phone Int? @unique
  email String? @unique
  avatar String? 
  created DateTime @default(now())
  updated DateTime @updatedAt
  tokens Token[]
  products Product[]
  favorite Favorite[]
  posts Post[]
  answers Answer[]
  wonders Wonder[]
  writtenReviews Review[] @relation(name:"writtenReviews")
  receivedReviews Review[] @relation(name:"receivedReviews")
  sales Sale[]
  buys Buy[]
  lives Live[]
  messages Message[]
  // record Record[]
}

model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  image String
  name String
  price Int
  description String @db.MediumText()
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
  favorites Favorite[]
  sales Sale[]
  buys Buy[]
}

model Favorite {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Post {
  id Int @id @default(autoincrement())
  question String @db.MediumText
  latitude Float?
  longitude Float?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
  answers Answer[]
  wonders Wonder[]
}

model Answer {
  id Int @id @default(autoincrement())
  answer String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Wonder {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Review {
  id Int @id @default(autoincrement())
  review String @db.MediumText
  score Int @default(1)
  createdBy User @relation(name:"writtenReviews",fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdFor User @relation(name:"receivedReviews",fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Sale {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Buy {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Live {
  id Int @id @default(autoincrement())
  name String
  price Int
  description String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
  messages Message[]
}

model Message {
  id Int @id @default(autoincrement())
  message String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  live Live @relation(fields: [liveId], references: [id], onDelete: Cascade)
  liveId Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

// model Record {
//   kind Kind
//   id Int @id @default(autoincrement())
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId Int
//   product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId Int
//   created DateTime @default(now())
//   updated DateTime @updatedAt
// }

// enum Kind {
//   Favorite
//   Sale
//   Buy
// }